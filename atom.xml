<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>今夜之梦</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://intosteel.github.io/"/>
  <updated>2019-09-03T11:15:14.296Z</updated>
  <id>https://intosteel.github.io/</id>
  
  <author>
    <name>IntoSteel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue基础语法</title>
    <link href="https://intosteel.github.io/2019/09/03/vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://intosteel.github.io/2019/09/03/vue基础语法/</id>
    <published>2019-09-03T10:58:27.000Z</published>
    <updated>2019-09-03T11:15:14.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Vue-js是什么"><a href="#1-Vue-js是什么" class="headerlink" title="1. Vue.js是什么"></a>1. Vue.js是什么</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1). 一位华裔前Google工程师(尤雨溪)开发的前端js库</span><br><span class="line">2). 作用: 动态构建用户界面</span><br><span class="line">3). 特点:</span><br><span class="line">  1.遵循MVVM模式</span><br><span class="line">  2.编码简洁, 体积小, 运行效率高, 移动/PC端开发</span><br><span class="line">  2.它本身只关注UI, 可以轻松引入vue插件和其它第三库开发项目</span><br><span class="line"></span><br><span class="line">4). 与其它框架的关联:</span><br><span class="line">  1.借鉴angular的模板和数据绑定技术</span><br><span class="line">  2.借鉴react的组件化和虚拟DOM技术</span><br><span class="line"></span><br><span class="line">5). vue包含一系列的扩展插件(库):</span><br><span class="line">  1.vue-cli: vue脚手架</span><br><span class="line">  2.vue-resource(axios): ajax请求</span><br><span class="line"><span class="bullet">  3. </span>vue-router: 路由</span><br><span class="line"><span class="bullet">  4. </span>vuex: 状态管理</span><br><span class="line"><span class="bullet">  5. </span>vue-lazyload: 图片懒加载</span><br><span class="line">  5.vue-scroller: 页面滑动相关</span><br><span class="line">  6.mint-ui: 基于vue的组件库(移动端)</span><br><span class="line">  7.element-ui: 基于vue的组件库(PC端)</span><br></pre></td></tr></table></figure><h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1). 引入vue.js</span><br><span class="line">2). 创建Vue实例对象(vm), 指定选项(配置)对象</span><br><span class="line">  el : 指定dom标签容器的选择器</span><br><span class="line">  data : 指定初始化状态数据的对象/函数(返回一个对象)</span><br><span class="line">3). 在页面模板中使用&#123;&#123;&#125;&#125;或vue指令</span><br></pre></td></tr></table></figure><h2 id="3-Vue对象的选项"><a href="#3-Vue对象的选项" class="headerlink" title="3. Vue对象的选项"></a>3. Vue对象的选项</h2><h3 id="1-el"><a href="#1-el" class="headerlink" title="1.el"></a>1.el</h3><p>  指定dom标签容器的选择器<br>  Vue就会管理对应的标签及其子标签</p><h3 id="2-data"><a href="#2-data" class="headerlink" title="2.data"></a>2.data</h3><p>  对象或函数类型<br>  指定初始化状态属性数据的对象<br>  vm也会自动拥有data中所有属性<br>  页面中可以直接访问使用<br>  数据代理: 由vm对象来代理对data中所有属性的操作(读/写)</p><h3 id="3-methods"><a href="#3-methods" class="headerlink" title="3.methods"></a>3.methods</h3><p>  包含多个方法的对象<br>  供页面中的事件指令来绑定回调<br>  回调函数默认有event参数, 但也可以指定自己的参数<br>  所有的方法由vue对象来调用, 访问data中的属性直接使用this.xxx</p><h3 id="4-computed"><a href="#4-computed" class="headerlink" title="4.computed"></a>4.computed</h3><p>  包含多个方法的对象<br>  对状态属性进行计算返回一个新的数据, 供页面获取显示<br>  一般情况下是相当于是一个只读的属性<br>  利用set/get方法来实现属性数据的计算读取, 同时监视属性数据的变化<br>  如何给对象定义get/set属性<br>    在创建对象时指定: get name () {return xxx} / set name (value) {}<br>      对象创建之后指定: Object.defineProperty(obj, age, {get(){}, set(value){}})</p><h3 id="5-watch"><a href="#5-watch" class="headerlink" title="5.watch"></a>5.watch</h3><p>  包含多个属性监视的对象<br>  分为一般监视和深度监视<br>      xxx: function(value){}<br>    xxx : {<br>      deep : true,<br>      handler : fun(value)<br>    }<br>  另一种添加监视方式: vm.$watch(‘xxx’, function(value){})</p><h2 id="4-过渡动画"><a href="#4-过渡动画" class="headerlink" title="4. 过渡动画"></a>4. 过渡动画</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">利用vue去操控css的transition/animation动画</span><br><span class="line">模板: 使用\&lt;transition name='xxx'&gt;包含带动画的标签</span><br><span class="line">css样式</span><br><span class="line">  .fade-enter-active: 进入过程, 指定进入的transition</span><br><span class="line">  .fade-leave-active: 离开过程, 指定离开的transition</span><br><span class="line">  .xxx-enter, .xxx-leave-to: 指定隐藏的样式</span><br><span class="line">编码例子</span><br><span class="line"><span class="code">    .xxx-enter-active, .xxx-leave-active &#123;</span></span><br><span class="line"><span class="code">      transition: opacity .5s</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    .xxx-enter, .xxx-leave-to &#123;</span></span><br><span class="line"><span class="code">      opacity: 0</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    &lt;transition name="xxx"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="code">      &lt;p v-if="show"&gt;hello&lt;/p&gt;</span></span><br><span class="line"><span class="code">    &lt;/transition&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-生命周期"><a href="#5-生命周期" class="headerlink" title="5. 生命周期"></a>5. 生命周期</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm/组件对象</span><br><span class="line">生命周期图</span><br><span class="line">主要的生命周期函数(钩子)</span><br><span class="line">  created() / mounted(): 启动异步任务(启动定时器,发送ajax请求, 绑定监听)</span><br><span class="line">  beforeDestroy(): 做一些收尾的工作</span><br></pre></td></tr></table></figure><h2 id="6-自定义过滤器"><a href="#6-自定义过滤器" class="headerlink" title="6. 自定义过滤器"></a>6. 自定义过滤器</h2><h3 id="1-理解"><a href="#1-理解" class="headerlink" title="1). 理解"></a>1). 理解</h3><p>  对需要显示的数据进行格式化后再显示</p><h2 id="2-编码"><a href="#2-编码" class="headerlink" title="2). 编码"></a>2). 编码</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1). 定义过滤器</span><br><span class="line">  Vue.filter(filterName, function(value[,arg1,arg2,...])&#123;</span><br><span class="line"><span class="code">    // 进行一定的数据处理</span></span><br><span class="line"><span class="code">    return newValue</span></span><br><span class="line">  &#125;)</span><br><span class="line">2). 使用过滤器</span><br><span class="line">  &lt;div&gt;&#123;&#123;myData | filterName&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;myData | filterName(arg)&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="7-vue内置指令"><a href="#7-vue内置指令" class="headerlink" title="7. vue内置指令"></a>7. vue内置指令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1、v-text/v-html: 指定标签体</span><br><span class="line"><span class="bullet">  * </span>v-text : 当作纯文本</span><br><span class="line"><span class="bullet">  * </span>v-html : 将value作为html标签来解析</span><br><span class="line">2、v-if v-else v-show: 显示/隐藏元素</span><br><span class="line"><span class="bullet">  * </span>v-if : 如果vlaue为true, 当前标签会输出在页面中</span><br><span class="line"><span class="bullet">  * </span>v-else : 与v-if一起使用, 如果value为false, 将当前标签输出到页面中</span><br><span class="line"><span class="bullet">  * </span>v-show: 就会在标签中添加display样式, 如果vlaue为true, display=block, 否则是none</span><br><span class="line">3、v-for : 遍历</span><br><span class="line"><span class="bullet">  * </span>遍历数组 : v-for="(person, index) in persons"</span><br><span class="line"><span class="bullet">  * </span>遍历对象 : v-for="value in person"   $key</span><br><span class="line">4、v-on : 绑定事件监听</span><br><span class="line"><span class="bullet">  * </span>v-on:事件名, 可以缩写为: @事件名</span><br><span class="line"><span class="bullet">  * </span>监视具体的按键: @keyup.keyCode   @keyup.enter</span><br><span class="line"><span class="bullet">  * </span>停止事件的冒泡和阻止事件默认行为: @click.stop   @click.prevent</span><br><span class="line"><span class="bullet">  * </span>隐含对象: $event</span><br><span class="line">5、v-bind : 强制绑定解析表达式  </span><br><span class="line"><span class="bullet">  * </span>html标签属性是不支持表达式的, 就可以使用v-bind</span><br><span class="line"><span class="bullet">  * </span>可以缩写为:  :id='name'</span><br><span class="line"><span class="bullet">  * </span>:class</span><br><span class="line"><span class="bullet">    * </span>:class="a"</span><br><span class="line"><span class="bullet">    * </span>:class="&#123;classA : isA, classB : isB&#125;"</span><br><span class="line"><span class="bullet">    * </span>:class="[classA, classB]"</span><br><span class="line"><span class="bullet">  * </span>:style</span><br><span class="line"><span class="code">    :style="&#123;color : color&#125;"</span></span><br><span class="line">6、v-model</span><br><span class="line"><span class="bullet">  * </span>双向数据绑定</span><br><span class="line"><span class="bullet">  * </span>自动收集用户输入数据</span><br><span class="line">7、ref : 标识某个标签</span><br><span class="line"><span class="bullet">  * </span>ref='xxx'</span><br><span class="line"><span class="bullet">  * </span>读取得到标签对象: this.$refs.xxx</span><br></pre></td></tr></table></figure><h2 id="8-自定义指令"><a href="#8-自定义指令" class="headerlink" title="8. 自定义指令"></a>8. 自定义指令</h2><h3 id="1-注册全局指令"><a href="#1-注册全局指令" class="headerlink" title="1.注册全局指令"></a>1.注册全局指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive('my-directive', function(el, binding)&#123;</span><br><span class="line">  //这里指令是对进行大写</span><br><span class="line">  el.innerHTML = binding.value.toUpperCase()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-注册局部指令"><a href="#2-注册局部指令" class="headerlink" title="2.注册局部指令"></a>2.注册局部指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">directives : &#123;</span><br><span class="line">  'my-directive' : function(el, binding) &#123;</span><br><span class="line"><span class="code">    //这里指令是进行小写</span></span><br><span class="line"><span class="code">      el.innerHTML = binding.value.toUpperCase()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用指令"><a href="#3-使用指令" class="headerlink" title="3). 使用指令"></a>3). 使用指令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-my-directive='xxx'&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Vue-js是什么&quot;&gt;&lt;a href=&quot;#1-Vue-js是什么&quot; class=&quot;headerlink&quot; title=&quot;1. Vue.js是什么&quot;&gt;&lt;/a&gt;1. Vue.js是什么&lt;/h2&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="https://intosteel.github.io/tags/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="VUE" scheme="https://intosteel.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli脚手架</title>
    <link href="https://intosteel.github.io/2019/09/03/vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>https://intosteel.github.io/2019/09/03/vue-cli脚手架/</id>
    <published>2019-09-03T10:20:23.000Z</published>
    <updated>2019-09-03T10:22:10.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-vue脚手架"><a href="#1-vue脚手架" class="headerlink" title="1. vue脚手架"></a>1. vue脚手架</h2><pre><code>用来创建vue项目的工具包创建项目:    npm install -g vue-cli    vue init webpack VueDemo开发环境运行:    cd VueDemo    npm install    npm run dev生产环境打包发布    npm run build    npm install -g serve    serve dist    http://localhost:5000</code></pre><h2 id="2-eslint"><a href="#2-eslint" class="headerlink" title="2. eslint"></a>2. eslint</h2><pre><code>用来做项目编码规范检查的工具基本原理: 定义了很多规则, 检查项目的代码一旦发现违背了某个规则就输出相应的提示信息有相应的配置, 可定制检查</code></pre><h2 id="3-组件化编程"><a href="#3-组件化编程" class="headerlink" title="3. 组件化编程"></a>3. 组件化编程</h2><pre><code>vue文件包含3个部分    &lt;template&gt;      &lt;div&gt;&lt;/div&gt;    &lt;/template&gt;    &lt;script&gt;        export default {          props: []/{}          data(){},   //在组件里，data必须使用这种函数来写          computed: {}          methods: {},          watch: {}          filters: {}          directives: {}          components: {}        }    &lt;/script&gt;    &lt;style&gt;    &lt;/style&gt;组件化编码的基本流程  1). 拆分界面, 抽取组件  2). 编写静态组件  3). 编写动态组件    1、引入组件：import App from &apos;./App.vue&apos;    2、映射组件标签：components:{App}    3、形成使用模板，初始化数据：template:&apos;&lt;App/&gt;&apos;       初始化数据, 动态显示初始化界面       实现与用户交互功能组件通信的5种方式  props  vue的自定义事件  pubsub第三方库  slot  vuex(后面单独讲)  1、props:    父子组件间通信的基本方式    属性值的2大类型:         一般: 父组件--&gt;子组件        函数: 子组件--&gt;父组件 逐层通信    隔层组件间传递: 必须逐层传递(麻烦)    兄弟组件间: 必须借助父组件(麻烦)  2、vue自定义事件(绑定事件，触发事件)    子组件与父组件的通信方式    用来取代function props    不适合隔层组件和兄弟组件间的通信  3、pubsub第三方库(消息订阅与发布)    适合于 任何关系 的组件间通信  4、slot    通信是带数据的标签    注意: 标签是在父组件中解析  5、vuex    多组件共享状态(数据的管理)    组件间的关系也没有限制    功能比pubsub强大, 更适用于vue项目</code></pre><h2 id="4-ajax"><a href="#4-ajax" class="headerlink" title="4. ajax"></a>4. ajax</h2><pre><code>1、相关库:    vue-resource: vue插件, 多用于vue1.x    axios: 第三方库, 多用于vue2.x2、vue-resource使用    // 引入模块    import VueResource from &apos;vue-resource&apos;    // 使用插件    Vue.use(VueResource)    // 通过vue/组件对象发送ajax请求    this.$http.get(&apos;/someUrl&apos;).then((response) =&gt; {      // success callback      console.log(response.data) //返回结果数据    }, (response) =&gt; {      // error callback      console.log(response.statusText) //错误信息    })3、axios使用    // 引入模块    import axios from &apos;axios&apos;    // 发送ajax请求    axios.get(url)      .then(response =&gt; {        console.log(response.data) // 得到返回结果数据      })      .catch(error =&gt; {      console.log(error.message)      })</code></pre><h2 id="5-vue-router"><a href="#5-vue-router" class="headerlink" title="5. vue-router"></a>5. vue-router</h2><pre><code>vue用来实现SPA的插件使用vue-router    1、创建路由器: router/index.js      new VueRouter({        routes: [          { // 一般路由            path: &apos;/about&apos;,            component: about          },          { // 自动跳转路由            path: &apos;/&apos;,             redirect: &apos;/about&apos;          }        ]      })    2、注册路由器: main.js       import router from &apos;./router&apos;        new Vue({          router        })    3、使用路由组件标签:        &lt;router-link to=&quot;/xxx&quot;&gt;Go to XXX&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;2、编写路由的3步    1. 定义路由组件        2. 映射路由    3. 编写路由2个标签3、嵌套路由    children: [        {          path: &apos;/home/news&apos;,          component: news        },        {          path: &apos;message&apos;,          component: message        }     ]4、向路由组件传递数据    params: &lt;router-link to=&quot;/home/news/abc/123&quot;&gt;    props: &lt;router-view msg=&apos;abc&apos;&gt;5、缓存路由组件    &lt;keep-alive&gt;      &lt;router-view&gt;&lt;/router-view&gt;    &lt;/keep-alive&gt;6、路由的编程式导航  this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)  this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)  this.$router.back(): 请求(返回)上一个记录路由</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-vue脚手架&quot;&gt;&lt;a href=&quot;#1-vue脚手架&quot; class=&quot;headerlink&quot; title=&quot;1. vue脚手架&quot;&gt;&lt;/a&gt;1. vue脚手架&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;用来创建vue项目的工具包
创建项目:
    npm install 
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="https://intosteel.github.io/tags/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="VUE" scheme="https://intosteel.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>Ajax基础操作</title>
    <link href="https://intosteel.github.io/2019/08/23/Ajax%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://intosteel.github.io/2019/08/23/Ajax基础操作/</id>
    <published>2019-08-23T01:25:26.000Z</published>
    <updated>2019-08-23T01:41:18.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ajax介绍"><a href="#ajax介绍" class="headerlink" title="ajax介绍"></a>ajax介绍</h2><ol><li>ajax   性能低 ，单向通信。</li><li>ajax单向，只能游览器（客户端）单向请求服务器，当服务器数据改变时，不会通知客户端,也就不能得到</li><li>webSocket  性能高 ，双向同信  甚至可以兼容IE6。</li><li>webSocket 双向，服务器数据改变，可以得知</li><li>有一个定律，但凡好的东西，都不兼容，可恨</li></ol><h2 id="一、Ajax的步骤分为四步"><a href="#一、Ajax的步骤分为四步" class="headerlink" title="一、Ajax的步骤分为四步"></a>一、Ajax的步骤分为四步</h2><ol><li>创建XMLHttpRequest这个对象，这个步骤中需要注意兼容处理</li><li>准备发送</li><li>执行发送</li><li>设置回调函数</li></ol><blockquote><p>xhr.responseText 文本 </p><p>xhr.responseXML  XML数据</p></blockquote><h2 id="二、表单验证"><a href="#二、表单验证" class="headerlink" title="二、表单验证"></a>二、表单验证</h2><h3 id="一、post和get两中提交方式"><a href="#一、post和get两中提交方式" class="headerlink" title="一、post和get两中提交方式"></a>一、post和get两中提交方式</h3><blockquote><p>一般前端页面，会根据服务器开发人员开发好的接口之后，所提供的接口文档，然后根据接口文档所提供的获取什么数据方式，访问什么地址，传入什么参数等</p></blockquote><ul><li>如<br><img src="/images/ajax1.jpg" alt="ajax1"></li></ul><h3 id="二、表单注册页面案例"><a href="#二、表单注册页面案例" class="headerlink" title="二、表单注册页面案例"></a>二、表单注册页面案例</h3><p><img src="/images/ajax2.png" alt="ajax2"><br><img src="/images/ajax3.png" alt="ajax3"></p><blockquote><p>checkUsername.php:  获取提交数据：$_GET 和 $_POST 的两种方式<br><img src="/images/ajax4.png" alt="ajax4"></p></blockquote><h2 id="三、数据格式"><a href="#三、数据格式" class="headerlink" title="三、数据格式"></a>三、数据格式</h2><ol><li>什么是数据格式：<br><img src="/images/ajax5.png" alt="ajax5"></li><li>xml格式:<br><img src="/images/ajax6.png" alt="ajax6"><br><img src="/images/ajax7.png" alt="ajax7"><ol><li>例如<br><img src="/images/ajax9.png" alt="ajax9"><br><img src="/images/ajax10.png" alt="ajax10"></li></ol></li></ol><p><strong>缺点：体积大，传输慢，元数据太多，解析不方便</strong></p><ol start="3"><li>json数据格式：<br><img src="/images/ajax8.png" alt="ajax8"></li></ol><p><strong>优点：体积小，传输快，解析方便</strong></p><h2 id="四、同步异步"><a href="#四、同步异步" class="headerlink" title="四、同步异步"></a>四、同步异步</h2><blockquote><p>第二部准备发送操作xhr.open中的布尔值决定同步异步方式</p></blockquote><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><h4 id="一、同步的缺点"><a href="#一、同步的缺点" class="headerlink" title="一、同步的缺点"></a>一、同步的缺点</h4><ol><li><p>页面会卡顿卡，顿多长时间取决于网络速度</p></li><li><p>xhr.onreadystatechange 的回掉函数不会执行，修改后才能获取数据</p><ul><li>异步是这样写的，需要回掉函数<br><img src="/images/ajax11.png" alt="ajax11"></li><li>同步是不需要设置回掉函数的<br><img src="/images/ajax12.png" alt="ajax12"></li></ul></li></ol><h4 id="二、同步缺点原因"><a href="#二、同步缺点原因" class="headerlink" title="二、同步缺点原因"></a>二、同步缺点原因</h4><ul><li>当时同步是，在第二步准备发送时，xhr.readyState的值已经4，和第三步时，xhr.status的值也已经是200，而xhr.onreadyStatechange函数是当两者改变时，才执行，所以此时回掉函数执行不了<br><img src="/images/13.ajaxpng" alt="ajax13"></li></ul><h2 id="五、关于xhr-readyState的值"><a href="#五、关于xhr-readyState的值" class="headerlink" title="五、关于xhr.readyState的值"></a>五、关于xhr.readyState的值</h2><p><img src="/images/ajax14.png" alt="ajax14"></p><h2 id="六、Xhr-status-是http的常见状态码"><a href="#六、Xhr-status-是http的常见状态码" class="headerlink" title="六、Xhr.status  是http的常见状态码"></a>六、Xhr.status  是http的常见状态码</h2><ol><li>200表示响应成功</li><li>301表示永久重定向，永远不会再次请求老的地址</li><li>302表示临时重定向，游览器下次还会请求老的地址</li><li>303 缓存</li><li>404表示没有找到请求的资源</li><li>500表示服务端错误</li></ol><h2 id="七、封装"><a href="#七、封装" class="headerlink" title="七、封装"></a>七、封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyAjax</span>(<span class="params">type,url,params,dataType,callback,async</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;  <span class="comment">//兼容游览器</span></span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当params为null或为get特殊时</span></span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">'get'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(params &amp;&amp; params !=<span class="string">''</span>)&#123;</span><br><span class="line">            url += <span class="string">'?'</span> + params;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    xhr.open(type,url,<span class="keyword">async</span>);</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">'get'</span>)&#123;</span><br><span class="line">        xhr.send(<span class="literal">null</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'post'</span>)&#123;</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencode'</span>) <span class="comment">//设置xhr请求头信息</span></span><br><span class="line">        xhr.send(params)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">async</span>)&#123;    <span class="comment">///为异步时</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span>(dataType === <span class="string">'json'</span>)&#123;</span><br><span class="line">                        result = xhr.responseText;</span><br><span class="line">                        result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dataType === <span class="string">'xml'</span>)&#123;</span><br><span class="line">                        result = xhr.responseXML;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;  <span class="comment">///这是是当为其他格式时，如text格式</span></span><br><span class="line">                        result = xhr.resposeText;</span><br><span class="line">                    &#125;</span><br><span class="line">                    callback(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;    <span class="comment">//为同步时</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> result == <span class="number">200</span>;</span><br><span class="line">                <span class="keyword">if</span>(dataType === <span class="string">'json'</span>)&#123;</span><br><span class="line">                    result = xhr.responseText</span><br><span class="line">                    result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dataType === <span class="string">'xml'</span>)&#123;</span><br><span class="line">                    result = xhr.responseXML;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    result = xhr.responseText;</span><br><span class="line">                &#125;</span><br><span class="line">                callback(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ajax介绍&quot;&gt;&lt;a href=&quot;#ajax介绍&quot; class=&quot;headerlink&quot; title=&quot;ajax介绍&quot;&gt;&lt;/a&gt;ajax介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ajax   性能低 ，单向通信。&lt;/li&gt;
&lt;li&gt;ajax单向，只能游览器（客户端）单向请求
      
    
    </summary>
    
    
      <category term="Ajax" scheme="https://intosteel.github.io/tags/Ajax/"/>
    
      <category term="技术笔记" scheme="https://intosteel.github.io/tags/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础语法</title>
    <link href="https://intosteel.github.io/2019/08/21/ES6%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://intosteel.github.io/2019/08/21/ES6基础语法/</id>
    <published>2019-08-21T04:41:35.000Z</published>
    <updated>2019-08-21T06:09:30.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6新语法"><a href="#ES6新语法" class="headerlink" title="ES6新语法"></a>ES6新语法</h2><hr><h2 id="一、变量-赋值"><a href="#一、变量-赋值" class="headerlink" title="一、变量/赋值"></a>一、变量/赋值</h2><h3 id="1-ES5"><a href="#1-ES5" class="headerlink" title="1.ES5"></a>1.ES5</h3><h4 id="1-1-常量"><a href="#1-1-常量" class="headerlink" title="1.1 常量"></a>1.1 常量</h4><blockquote><p>ES5中常量定义是通过Object.defineProperty()，来改变属性描述符，进而达到常量的效果。而且重复定义不会报错</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(对象，对象属性,&#123;</span><br><span class="line">    value:默认值</span><br><span class="line">    writable:是否可写</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>,<span class="string">"aaa"</span>,&#123;</span><br><span class="line">                value:<span class="number">3.14159</span>,</span><br><span class="line">                writable:<span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">window</span>.aaa);</span><br><span class="line">            <span class="built_in">window</span>.PI_HBK=<span class="number">200</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">window</span>.aaa);</span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2 变量"></a>1.2 变量</h4><blockquote><p>var    可以重复定义、不能限制修改、没有块级作用域</p></blockquote><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2.ES6"></a>2.ES6</h3><blockquote><p>let        不能重复定义、变量、有块级作用域<br>const   不能重复定义、常量、有块级作用域在同一作用域中重复定义赋值会报错</p></blockquote><hr><h2 id="二、解构赋值"><a href="#二、解构赋值" class="headerlink" title="二、解构赋值"></a>二、解构赋值</h2><blockquote><p>es6允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）</p></blockquote><ul><li>变量要和右边的属性同名；右边得是个东西。可以理解为  左边&lt;=右边</li></ul><h3 id="1-数组解构赋值"><a href="#1-数组解构赋值" class="headerlink" title="1.数组解构赋值"></a>1.数组解构赋值</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [a,b,c]=[1,2,4]</span><br><span class="line">console.log(a,b,c)</span><br></pre></td></tr></table></figure><h3 id="2-对象解构赋值"><a href="#2-对象解构赋值" class="headerlink" title="2.对象解构赋值"></a>2.对象解构赋值</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let&#123;a,b&#125; = &#123;a:'aaa',b:'bbb'&#125;;</span><br><span class="line">console.log(a,b);//aaa  bbb</span><br></pre></td></tr></table></figure><h3 id="3-字符串解构赋值"><a href="#3-字符串解构赋值" class="headerlink" title="3.字符串解构赋值"></a>3.字符串解构赋值</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let[a,b,c]='hello';</span><br><span class="line">console.log(a,b,c);//hel</span><br></pre></td></tr></table></figure><h3 id="4-函数解构赋值"><a href="#4-函数解构赋值" class="headerlink" title="4.函数解构赋值"></a>4.函数解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">[x,y]</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x+y)；<span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line">fun([<span class="number">1</span>,<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h3 id="5-解构赋值的用途"><a href="#5-解构赋值的用途" class="headerlink" title="5.解构赋值的用途"></a>5.解构赋值的用途</h3><ol><li><p>交换变量值</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y=<span class="number">2</span>;</span><br><span class="line">[x,y]=[y,x];</span><br><span class="line"><span class="built_in">console</span>.log(x,y);<span class="comment">//2,1</span></span><br></pre></td></tr></table></figure></li><li><p>从函数返回多个值</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a:<span class="number">1</span>,</span><br><span class="line">        b:<span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;a,b&#125;=fun();</span><br><span class="line"><span class="built_in">console</span>.log(a,b);<span class="comment">//1,2</span></span><br></pre></td></tr></table></figure></li><li><p>函数传参</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有序传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">[a,b,c]</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line">fun([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//无序传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">&#123;x,y,z&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(z,x,y);</span><br><span class="line">&#125;</span><br><span class="line">fun1(&#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">z</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>提取json数据</p><ul><li>解构对提取数据尤其有用</li></ul></li><li><p>函数参数默认值</p></li></ol><ul><li>必须定义和赋值同步完成，否则报错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>[a,b];</span><br><span class="line">[a,b]=[<span class="number">12</span>,<span class="number">10</span>]</span><br><span class="line">alert(a,b) <span class="comment">//error</span></span><br></pre></td></tr></table></figure><hr><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><h3 id="1-ES5中的函数"><a href="#1-ES5中的函数" class="headerlink" title="1.ES5中的函数"></a>1.ES5中的函数</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(参数，参数)&#123;</span><br><span class="line"><span class="code">    函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ES6中的箭头函数"><a href="#2-ES6中的箭头函数" class="headerlink" title="2.ES6中的箭头函数"></a>2.ES6中的箭头函数</h3><ul><li>一般箭头函数就是把function省略</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(参数，参数)=&gt;&#123;</span><br><span class="line"><span class="code">    函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>特殊情况：</p><ol><li>如果有且仅有1个参数，()可以省</li><li>如果函数体只有一句话，而且是return，{}可以省</li></ol></li><li><p>注意：</p><ol><li>箭头函数不绑定Arguments 对象</li><li>箭头函数只能用于非方法函数</li><li>箭头函数不能作为构造函数</li><li>箭头函数没有property属性</li></ol></li></ul><h4 id="2-1-排序大小案例"><a href="#2-1-排序大小案例" class="headerlink" title="2.1 排序大小案例"></a>2.1 排序大小案例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从小到大排序</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">12</span>,<span class="number">5</span>,<span class="number">88</span>,<span class="number">34</span>,<span class="number">32</span>,<span class="number">11</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1-n2</span><br><span class="line">&#125;)；</span><br><span class="line">alert(arr);</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">12</span>,<span class="number">5</span>,<span class="number">88</span>,<span class="number">34</span>,<span class="number">32</span>,<span class="number">11</span>];</span><br><span class="line">arr.sort(<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>n1-n2);</span><br><span class="line">alert(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个参数时</span></span><br><span class="line"><span class="keyword">let</span> show=<span class="function"><span class="params">a</span>=&gt;</span>a*<span class="number">3</span>;</span><br><span class="line">alert(show(<span class="number">13</span>));<span class="comment">//39</span></span><br></pre></td></tr></table></figure><h3 id="3-参数展开"><a href="#3-参数展开" class="headerlink" title="3.参数展开"></a>3.参数展开</h3><ul><li>剩余参数、数组展开，也就是三个点 …</li></ul><ol><li><p>“三个点”的第一个用途：接受剩余参数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show1</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    show2(...args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a+<span class="string">','</span>+b);</span><br><span class="line">&#125;</span><br><span class="line">show1(<span class="number">12</span>,<span class="number">5</span>);<span class="comment">//12,5</span></span><br></pre></td></tr></table></figure></li><li><p>“三个点”的第2个用途：展开一个数组</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">12</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">99</span>]</span><br><span class="line"><span class="comment">//...arr   =&gt;   12,5,8,99</span></span><br><span class="line"><span class="keyword">let</span> arr2=[<span class="number">1</span>,<span class="number">3</span>,...arr,<span class="number">56</span>,<span class="number">67</span>]</span><br><span class="line">alert(arr2);<span class="comment">//1,3,12,5,8,99,56,67</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><h3 id="1-map-遍历，映射"><a href="#1-map-遍历，映射" class="headerlink" title="1.map 遍历，映射"></a>1.map 遍历，映射</h3><blockquote><p>一个对一个，也就是一个个遍历进去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2=arr.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">alert(arr2);<span class="comment">//false,false,true,true,true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//再简写</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2=arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;=<span class="number">3</span>);</span><br><span class="line">alert(arr2);</span><br></pre></td></tr></table></figure><h3 id="2-reduce-汇总：一堆-gt-一个"><a href="#2-reduce-汇总：一堆-gt-一个" class="headerlink" title="2.reduce 汇总：一堆 =&gt; 一个"></a>2.reduce 汇总：一堆 =&gt; 一个</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">12</span>,<span class="number">5</span>,<span class="number">88</span>,<span class="number">37</span>,<span class="number">21</span>,<span class="number">91.17</span>,<span class="number">24</span>];</span><br><span class="line"><span class="comment">//tmp代表过程计算</span></span><br><span class="line"><span class="keyword">let</span> sum=arr.reduce(<span class="function">(<span class="params">tmp,item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp,item,index);</span><br><span class="line">    <span class="comment">//12,5,1</span></span><br><span class="line">    <span class="comment">//17,88,2</span></span><br><span class="line">    <span class="comment">//105,37,3</span></span><br><span class="line">    <span class="comment">//142,21,4</span></span><br><span class="line">    <span class="comment">//163,91,5</span></span><br><span class="line">    <span class="comment">//254,17,6</span></span><br><span class="line">    <span class="comment">//271,24,7</span></span><br><span class="line">    <span class="keyword">return</span> tmp+itme;</span><br><span class="line">&#125;);</span><br><span class="line">alert(sum);<span class="comment">//295</span></span><br></pre></td></tr></table></figure><h3 id="3-filter-过滤，筛选"><a href="#3-filter-过滤，筛选" class="headerlink" title="3.filter 过滤，筛选"></a>3.filter 过滤，筛选</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">12</span>,<span class="number">5</span>,<span class="number">88</span>,<span class="number">37</span>,<span class="number">21</span>,<span class="number">91</span>,<span class="number">17</span>,<span class="number">24</span>];</span><br><span class="line"><span class="keyword">let</span> arr2=arr.filter(<span class="function"><span class="params">item</span>=&gt;</span>item%<span class="number">2</span>);</span><br><span class="line">alert(arr2);<span class="comment">//5,37,21,91,17</span></span><br></pre></td></tr></table></figure><h3 id="4-forEach-遍历"><a href="#4-forEach-遍历" class="headerlink" title="4.forEach 遍历"></a>4.forEach 遍历</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">12</span>,<span class="number">5</span>,<span class="number">88</span>,<span class="number">37</span>,<span class="number">21</span>,<span class="number">91</span>,<span class="number">17</span>,<span class="number">24</span>];</span><br><span class="line"><span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    sum+=item;</span><br><span class="line">&#125;);</span><br><span class="line">alert(sum);<span class="comment">//295</span></span><br></pre></td></tr></table></figure><h3 id="5-Array-from-转换为真正的数组"><a href="#5-Array-from-转换为真正的数组" class="headerlink" title="5.Array.from  转换为真正的数组"></a>5.Array.from  转换为真正的数组</h3><blockquote><p>类数组使用forEach遍历</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aDiv=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"><span class="comment">//aDiv是类数组(类数组有length)，如果直接aDiv.forEach(),会报错，</span></span><br><span class="line"><span class="comment">//使用Array.from(aDiv),转换为真正的Array</span></span><br><span class="line"><span class="built_in">Array</span>.from(aDiv).forEach(<span class="function"><span class="params">div</span>=&gt;</span>&#123;</span><br><span class="line">    div.style.background=<span class="string">'yellow'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="五、字符串"><a href="#五、字符串" class="headerlink" title="五、字符串"></a>五、字符串</h2><ol><li>字符串模板(``):植入变量、任意折行</li><li>${}，结合字符串模板方便</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json=&#123;<span class="attr">name</span>:<span class="string">'blue'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="comment">//alert('我叫：'+jsom.name+',我今年'+json.age+'岁')</span></span><br><span class="line">alert(<span class="string">`我叫：<span class="subst">$&#123;json.name&#125;</span>,我今年<span class="subst">$&#123;json.age&#125;</span>岁`</span>)；</span><br></pre></td></tr></table></figure><hr><h2 id="六、面向对象"><a href="#六、面向对象" class="headerlink" title="六、面向对象"></a>六、面向对象</h2><h3 id="1、传统面向对象"><a href="#1、传统面向对象" class="headerlink" title="1、传统面向对象"></a>1、传统面向对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.showName=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'我叫'</span>+<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.showAge=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'我'</span>+<span class="keyword">this</span>.age+<span class="string">'岁'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当想继承父级函数时用call(),但是this对象一直在变，容易乱</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Worker</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>,name,age);</span><br><span class="line">    <span class="keyword">this</span>.job=job;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统的也可以new Person()</span></span><br><span class="line">Worker.prototype=<span class="keyword">new</span> Person();</span><br><span class="line">Worker.prototype.constructor=Worker;</span><br><span class="line">Worker.prototype.showJob=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'我是做：'</span>+<span class="keyword">this</span>.job);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> w=<span class="keyword">new</span> Worker(<span class="string">'blue'</span>,<span class="number">18</span>,<span class="string">'打杂的'</span>)；</span><br><span class="line">w.showName();</span><br><span class="line">w.showAge();</span><br><span class="line">w.showJob();</span><br></pre></td></tr></table></figure><h3 id="2、ES6中的面向对象"><a href="#2、ES6中的面向对象" class="headerlink" title="2、ES6中的面向对象"></a>2、ES6中的面向对象</h3><ol><li>先生成类</li><li>在类中构造函数，同时加方法</li><li>使用new实例化对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    showName()&#123;</span><br><span class="line">        alert(<span class="string">'我叫'</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    showAge()&#123;</span><br><span class="line">        alert(<span class="string">'我'</span>+<span class="keyword">this</span>.age+<span class="string">'岁'</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Person(<span class="string">'blue'</span>,<span class="number">18</span>);</span><br><span class="line">p.showName();</span><br><span class="line">p.showAge();</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承父类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,age,job)&#123;</span><br><span class="line">        <span class="comment">//super-超类(父类),继承父类的属性，方法是extends带过来的</span></span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">        <span class="keyword">this</span>.job=job;</span><br><span class="line">    &#125;</span><br><span class="line">    showJob()&#123;</span><br><span class="line">        alert(<span class="string">'我是做：'</span>+<span class="keyword">this</span>.job)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w=<span class="keyword">new</span> Woeker(<span class="string">'blue'</span>,<span class="number">18</span>,<span class="string">'打杂的'</span>);</span><br><span class="line">w.showName();</span><br><span class="line">w.showAge();</span><br><span class="line">w.showJob();</span><br></pre></td></tr></table></figure><h3 id="3、this"><a href="#3、this" class="headerlink" title="3、this"></a>3、this</h3><blockquote><p>在普通函数中，根据调用我的的人this老变，而在ES6中，this指向window恒定不变，除非加上bind()来改变指向，但bind()在箭头函数中不变。</p></blockquote><ul><li>一般函数</li></ul><blockquote><p>当给函数一个返回对象是，this指向这个对象<br>一般函数this默认指向window对象，但可以给window对象增加一个a属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);<span class="comment">//5</span></span><br></pre></td></tr></table></figure><ul><li>ES6箭头函数的this指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=<span class="number">5</span>;</span><br><span class="line">    o=<span class="function"><span class="params">()</span>=&gt;</span>(<span class="keyword">this</span>.b=<span class="number">6</span>);</span><br><span class="line">    o();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1=<span class="keyword">new</span> s();</span><br><span class="line"><span class="built_in">console</span>.log(s1);<span class="comment">//&#123;a:5,b:6&#125;;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>我们看到箭头函数的执行环境是s函数，并且指向新创建的对象，箭头函数中的this便也指向新创建的对象。<br>所以：箭头函数的this指向和它的执行环境中的this保持一致，也就是说es6箭头函数this指向定义这个函数的外层代码的this。</p></blockquote><ul><li>es6箭头函数没有外层加上事件方法或使用new创建新对象时，this还是指向window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.默认还是window</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=<span class="number">5</span>;</span><br><span class="line">    o=<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">this</span>.b=<span class="number">6</span>&#125;;</span><br><span class="line">    o();</span><br><span class="line">&#125;</span><br><span class="line">s();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);<span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加函数事件方法,下面是返回到document对象</span></span><br><span class="line"><span class="built_in">document</span>.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>);<span class="comment">//[object HTMLDocument]</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> oBtn=<span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span><br><span class="line">    oBtn.onclick=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这种返回对象也是指向window对象</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.a=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>);<span class="comment">//[object window]</span></span><br><span class="line">&#125;</span><br><span class="line">arr.a();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">b=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>)<span class="comment">//[object window]</span></span><br><span class="line">&#125;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><h3 id="4、bind-如何使用"><a href="#4、bind-如何使用" class="headerlink" title="4、bind()如何使用"></a>4、bind()如何使用</h3><blockquote><p>给函数定死一个this<br>JavaScript新手经常犯的一个错误是将一个方法从对象中拿出来，然后再调用，希望方法中的 this 是原来的对象（比如在回调中传入这个方法）。如果不做特殊处理的话，一般会丢失原来的对象。从原来的函数和原来的对象创建一个绑定函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如：本来指向document,加bind指向p</span></span><br><span class="line"><span class="built_in">document</span>.onclick=p.showName.bind(p)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">42</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> unboundGetX = <span class="built_in">module</span>.getX;</span><br><span class="line"><span class="built_in">console</span>.log(unboundGetX()); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = unboundGetX.bind(<span class="built_in">module</span>); <span class="comment">//绑定对象</span></span><br><span class="line"><span class="built_in">console</span>.log(boundGetX());<span class="comment">//42</span></span><br></pre></td></tr></table></figure><blockquote><p>bind()在箭头函数里面无效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头函数本身this指向document对象，是bind()无效</span></span><br><span class="line"><span class="built_in">document</span>.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>);<span class="comment">//[object HTMLDocument]</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> oBtn=<span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span><br><span class="line">    oBtn.onclick=a.bind(<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、promise"><a href="#七、promise" class="headerlink" title="七、promise"></a>七、promise</h2><h3 id="1、ajax"><a href="#1、ajax" class="headerlink" title="1、ajax"></a>1、ajax</h3><ul><li>一般异步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/banner_data'</span>,</span><br><span class="line">    success(banners)&#123;</span><br><span class="line">        $ajax(&#123;</span><br><span class="line">            url:<span class="string">'/user_data'</span>,</span><br><span class="line">            success(user)&#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            error()&#123;</span><br><span class="line">                alert(<span class="string">'获取数据失败'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    error()&#123;</span><br><span class="line">        alert(<span class="string">'获取数据失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>一般同步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> banner=$.ajax(&#123;<span class="attr">url</span>:<span class="string">'/banner_data'</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> items=$.ajax(&#123;<span class="attr">url</span>:<span class="string">'/item_data'</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> users=$.ajax(&#123;<span class="attr">url</span>:<span class="string">'/uers_data'</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="promise一般操作"><a href="#promise一般操作" class="headerlink" title="promise一般操作"></a>promise一般操作</h3><ul><li>使用promise实现异步的同步操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个</span></span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    reslove();</span><br><span class="line">    reject();</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;,()=&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个</span></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    $.ajax(<span class="string">'/banner_data'</span>),</span><br><span class="line">    $.ajax(<span class="string">'/item_data'</span>),</span><br><span class="line">    $.ajax(<span class="string">'/user_data'</span>),</span><br><span class="line">    $.ajax(<span class="string">'/news_data'</span>)</span><br><span class="line">]).then(<span class="function"><span class="params">arr</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [banners,items,users,news]=arr;</span><br><span class="line">&#125;,err=&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、promise作用：解除异步操作</span><br><span class="line"><span class="number">2</span>、promise局限性：带逻辑的异步操作麻烦</span><br></pre></td></tr></table></figure><blockquote><p>注意：promise.all([]).then(arr=&gt;{},err=&gt;{})中，成功才执行arr=&gt;{},失败执行err=&gt;{},和resolve、reject一样</p></blockquote><h3 id="2、promise处理单个数据案例"><a href="#2、promise处理单个数据案例" class="headerlink" title="2、promise处理单个数据案例"></a>2、promise处理单个数据案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//resolve         成功-&gt;执行</span></span><br><span class="line">    <span class="comment">//reject          失败-&gt;执行</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">'/1.txt'</span>,</span><br><span class="line">        dataType:<span class="string">'json'</span>,</span><br><span class="line">        success(json)&#123;</span><br><span class="line">            resolve(json);</span><br><span class="line">        &#125;,</span><br><span class="line">        error(err)&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">json</span>=&gt;</span>&#123;</span><br><span class="line">    alert(<span class="string">'成功'</span>)；</span><br><span class="line">    <span class="built_in">console</span>.log(json);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    alert(<span class="string">'失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3、promise处理多个数据案例"><a href="#3、promise处理多个数据案例" class="headerlink" title="3、promise处理多个数据案例"></a>3、promise处理多个数据案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">'1.txt'</span>,</span><br><span class="line">        dataType:<span class="string">'json'</span>,</span><br><span class="line">        success(json)&#123;</span><br><span class="line">            resolve(json)</span><br><span class="line">        &#125;</span><br><span class="line">        error(err)&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">'2.txt'</span>,</span><br><span class="line">        dataType:<span class="string">'json'</span></span><br><span class="line">        success(json)&#123;</span><br><span class="line">            resolve(json)</span><br><span class="line">        &#125;</span><br><span class="line">        error(err)&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p3=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">'3.txt'</span>,</span><br><span class="line">        dataType:<span class="string">'json'</span></span><br><span class="line">        success(json)&#123;</span><br><span class="line">            resolve(json)</span><br><span class="line">        &#125;,</span><br><span class="line">        error(err)&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.all([p,p2,p3]).then(<span class="function"><span class="params">arr</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,b,c]=arr;</span><br><span class="line">    alert(<span class="string">'成功'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    alert(<span class="string">'失败'</span>)</span><br><span class="line">&#125;)；</span><br></pre></td></tr></table></figure><h3 id="4、promise的方法"><a href="#4、promise的方法" class="headerlink" title="4、promise的方法"></a>4、promise的方法</h3><ol><li>promise.all().then(),all中所有都成功才执行后面then()</li><li>peomise.race().then(),只要有一个完成就执行后面</li></ol><hr><h2 id="八、generator"><a href="#八、generator" class="headerlink" title="八、generator"></a>八、generator</h2><ul><li>promise的升级版generator,可以暂停yield，过渡阶段产品</li><li>generator函数：跟普通函数类似，只是加个 * ，同时返回对象</li></ul><blockquote><p>执行一个next(),就执行yield上面(右边)的，再次next()就执行yield下面(左边)的。<br>yield要执行两次next(),这样可以给预处理时间。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'aaaa'</span>);</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">    alert(<span class="string">'bbbb'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gen是iterator(迭代)对象</span></span><br><span class="line"><span class="keyword">let</span> gen=show();<span class="comment">//返回对象</span></span><br><span class="line">gen.next(); <span class="comment">///aaaa</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gen.next();  <span class="comment">//bbbb</span></span><br><span class="line">&#125;,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>并且yield两边互不干扰,先执行完yield右边，才赋值给a</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'aaa'</span>);</span><br><span class="line">    <span class="keyword">let</span> a=<span class="keyword">yield</span>;</span><br><span class="line">    alert(<span class="string">'bbb'</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pp是iterator(迭代)对象</span></span><br><span class="line"><span class="keyword">let</span> pp=show();</span><br><span class="line">pp.next(<span class="number">12</span>);<span class="comment">//aaa</span></span><br><span class="line">pp.next(<span class="number">12</span>);<span class="comment">//bbb12</span></span><br></pre></td></tr></table></figure><blockquote><p>yield可以返回return</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'aaa'</span>);  <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">56</span>;</span><br><span class="line">    alert(<span class="string">'bbb'</span>);  <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">89</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面gen是iterator(迭代)对象</span></span><br><span class="line"><span class="keyword">let</span> gen=show();</span><br><span class="line"><span class="keyword">let</span> res1=gen.next();<span class="built_in">console</span>.log(res1);<span class="comment">//2 &#123;value:56,done:false&#125;,done为false,因为还没执行完</span></span><br><span class="line"><span class="keyword">let</span> res2=gen.next();<span class="built_in">console</span>.log(res2);<span class="comment">//3 &#123;value:89,done:true&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：generator函数不能写成箭头函数</p></blockquote><hr><h2 id="九、async"><a href="#九、async" class="headerlink" title="九、async"></a>九、async</h2><blockquote><p>generator的升级版，因为generator是过渡阶段，所以async和generator相似</p></blockquote><ul><li>generator:</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function *xxx()&#123;</span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="code">    let res=yield xxx;</span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="code">    let res2=yield xxx;</span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>async</li></ul><blockquote><p>如果await右边不是异步操作(会检测)，就会直接执行，而generator会直接执行下面个。<br>一般await右边会跟着generator或promise</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">async function xxx()&#123;</span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="code">    let res=await xxx;</span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="code">    let res2=await xxx;</span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//也就是先执行右边，然后赋值给左边</span><br><span class="line">async function()&#123;</span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="code">    let 结果 = await 异步操作(promise($.ajax()本身就是promise对象)、generator、另一个async函数)</span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">sec</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> promise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;,sec*<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1</span>);</span><br><span class="line">    alert(<span class="string">'b'</span>);</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">2</span>);</span><br><span class="line">    alert(<span class="string">'c'</span>)</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br></pre></td></tr></table></figure><ul><li>async 处理逻辑更方便</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span>()=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> data1=<span class="keyword">await</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">'1.txt'</span>,<span class="attr">dataType</span>:<span class="string">'json'</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span>(data1.a+data1.b&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> data2=<span class="keyword">await</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">'2.txt'</span>,<span class="attr">dataType</span>:<span class="string">'json'</span>&#125;)</span><br><span class="line">        alert(data2[<span class="number">0</span>])</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data3=<span class="keyword">await</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">'3.txt'</span>,<span class="attr">dataType</span>:<span class="string">'json'</span>&#125;)</span><br><span class="line">        alert(data3.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//注：()()为匿名函数，可以直接执行</span></span><br></pre></td></tr></table></figure><h3 id="async错误处理"><a href="#async错误处理" class="headerlink" title="async错误处理"></a>async错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data1=<span class="keyword">await</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">'1.txt'</span>,<span class="attr">dataType</span>:<span class="string">'json'</span>&#125;)</span><br><span class="line">    <span class="keyword">let</span> data2=<span class="keyword">await</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">'2.txt'</span>,<span class="attr">dataType</span>:<span class="string">'json'</span>&#125;)</span><br><span class="line">    <span class="keyword">let</span> data3=<span class="keyword">await</span> $.ajax(&#123;<span class="attr">url</span>:<span class="string">'3.txt'</span>,<span class="attr">dataType</span>:<span class="string">'json'</span>&#125;)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        alert(<span class="string">'有问题'</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'有错误'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br></pre></td></tr></table></figure><ul><li>不允许子在主线程里异步操作，会卡死</li></ul><hr><h2 id="十、babel"><a href="#十、babel" class="headerlink" title="十、babel"></a>十、babel</h2><blockquote><p>把ES6编译成ES5</p></blockquote><h3 id="1、安装babel"><a href="#1、安装babel" class="headerlink" title="1、安装babel"></a>1、安装babel</h3><ol><li><p>cnpm</p><blockquote><p>npm原版慢，可以利用cnpm安装。<br>cnpm淘宝源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a><br>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote></li><li><p>先创建文件babel</p><p> <img src="/images/babel1.png" alt="babel1"></p></li><li><p>打开package.json</p><p> <img src="/images/babel2.png" alt="babel2"></p></li><li><p>安装 babel cli</p><p> <img src="/images/babel3.png" alt="babel3"></p><blockquote><p>这时babel多了一个node_modules文件，这node_modules不能拷贝，但不小心删掉node_modules中的一些文件时，使用 cnom i 恢复</p></blockquote><p> <img src="/images/babel4.png" alt="babel4"></p></li><li><p>创建 .babelrc文件，写入下面内容，最好使用编辑器创建，到外面创建，可能创建不了</p><p> <img src="/images/babel5.png" alt="babel5"></p><blockquote><p>这时package.json多了一些</p></blockquote><p> <img src="/images/babel6.png" alt="babel6"></p></li><li><p>安装 babel-preset-env -D</p><p> <img src="/images/babel7.png" alt="babel7"></p></li></ol><h3 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h3><ol><li><p>添加启动编译脚本</p><blockquote><p>如，修改成：”build”:”babel js -d build”<br>-d 是输出，js是输出到build</p></blockquote><p> <img src="/images/babel8.png" alt="babel8"></p></li><li><p>启动</p></li></ol><blockquote><p>npm run build</p></blockquote><ul><li>这时babel目录下多了一个编译好的build文件</li></ul><h4 id="拓展一下，添加任意启动项"><a href="#拓展一下，添加任意启动项" class="headerlink" title="拓展一下，添加任意启动项"></a>拓展一下，添加任意启动项</h4><ul><li>修改script文件</li></ul><blockquote><p>如添加启动node的<br>“start”:”node server.js –port=80 -s -o a.log”,<br>启动：npm run start</p></blockquote><hr><h2 id="十一、数据交互"><a href="#十一、数据交互" class="headerlink" title="十一、数据交互"></a>十一、数据交互</h2><h3 id="1、数据交互介绍"><a href="#1、数据交互介绍" class="headerlink" title="1、数据交互介绍"></a>1、数据交互介绍</h3><ul><li>数据交互的方法：</li></ul><ol><li>表单：最简单，最基本，http数据请求其实都是表单</li><li>ajax:不用刷新，ajax不可以跨域，但麻烦，要借助。。。</li><li>jsonp：直接跨域，安全性差，越开越少，算是中间产物吧。jsonp只能发起get请求</li><li>webSocket：快，双向，跨域</li></ol><ul><li>系统模块：</li></ul><ol><li>服务器完成–http、fs、流操作</li><li>webSocket–socket.io</li><li>formData–ajax2.0,文件上传，进度</li><li>cors跨域</li></ol><h3 id="2、跨域"><a href="#2、跨域" class="headerlink" title="2、跨域"></a>2、跨域</h3><ul><li>什么是跨域</li></ul><ol><li>不同源就是跨域，比如<a href="http://www.baidu.com跳到www.360.cn。但是，a标签点击去第三方网站不是跨域，是指数据调到第三方是跨域" target="_blank" rel="noopener">www.baidu.com跳到www.360.cn。但是，a标签点击去第三方网站不是跨域，是指数据调到第三方是跨域</a></li><li>xxs 跨脚本攻击</li><li>跨域有风险</li></ol><ul><li>什么时候必须跨域</li></ul><ol><li>一个网站有多个域名，虽然是同一个网站，但游览器不知道。</li><li>第三方数据，如网站页面上的qq登入，需要发送校验请求。</li></ol><ul><li>安全性：分为两块</li></ul><ol><li>系统安全性</li><li>代码</li></ol><h3 id="3、表单"><a href="#3、表单" class="headerlink" title="3、表单"></a>3、表单</h3><ol><li><p>属性</p><ol><li>action 提交到哪</li><li>method 方式–GET、PSOT，不常见 PUT、HEADER、DELETE</li><li>name  必须加，可以重复</li><li>submit按钮  提交</li></ol></li><li><p>数据提交方法</p><ul><li><p>GET  数据放在URL里面</p><ol><li>容量有限(&lt;=32k)</li><li>看得见</li><li>有缓存</li></ol></li><li><p>POST  数据放在http-body里面</p><ol><li>容量大(&lt;=1G)</li><li>看不见</li><li>不缓存</li></ol></li></ul></li><li><p>get、post安全性完全一样，跟看不看得见无关，https才是真安全</p></li><li><p>表单重复提交处理</p><ol><li>开始提交的时候–禁用submit</li><li>完成(成功，失败)–启用submit</li></ol></li><li><p>content-type 有哪些类型</p><ol><li>text/plain    纯文本  用不着</li><li>application/x-www-form-urlencoded &amp;&amp;&amp;的方式  简单数据</li><li>multipart/form-data   定界符分割各个数据  文件上传</li></ol></li></ol><h3 id="4、ajax"><a href="#4、ajax" class="headerlink" title="4、ajax"></a>4、ajax</h3><ul><li>ajax简单封装，这里只是异步没有考虑同步，当同步都淘汰了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    options=options||&#123;&#125;;</span><br><span class="line">    <span class="comment">//可以设置默认为get方式</span></span><br><span class="line">    options.type=options.type||<span class="string">'get'</span>;</span><br><span class="line">    options.data=options.data||&#123;&#125;;</span><br><span class="line">    options.dataType=options.dataType||<span class="string">'text'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不兼容IE6</span></span><br><span class="line">    <span class="keyword">let</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//兼容IE6</span></span><br><span class="line">            <span class="comment">//if(window.XMLHttpRequest)&#123;</span></span><br><span class="line">            <span class="comment">//    var xhr=new XMLHttpRequest();</span></span><br><span class="line">            <span class="comment">//&#125;else&#123;</span></span><br><span class="line">            <span class="comment">//   var xhr=new ActiveXObject ('Microsoft.XMLHttp');</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据组装，就是data数据收集起来</span></span><br><span class="line">    <span class="keyword">let</span> arr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">in</span> options.data)&#123;</span><br><span class="line">        <span class="comment">//encodeURLComponent() 把中文和特殊符号编码成英文</span></span><br><span class="line">        arr.push(<span class="string">`<span class="subst">$&#123;encodeURLComponent(name)&#125;</span>=<span class="subst">$&#123;encodeURLComponent(options.data[name])&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> strData=arr.join(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="comment">//判断传输方式,这里只用了post和get,没有考虑其他方式，有点缺陷，</span></span><br><span class="line">    <span class="keyword">if</span>(options.type==<span class="string">'post'</span>)&#123;</span><br><span class="line">        xhr.open(<span class="string">'POST'</span>,options.url,<span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">        xhr.send(strData)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>,options.url+<span class="string">'?'</span>+strData,<span class="literal">true</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收</span></span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//成功——2xx、304</span></span><br><span class="line">            <span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span> &amp;&amp; xhr.status&lt;<span class="number">300</span> ||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> data=xhr.responseText;</span><br><span class="line">                <span class="keyword">switch</span>(options.dataType)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'josn'</span>:</span><br><span class="line">                    <span class="comment">//兼容JOSN，低版本游览器不支持JSON,JSON.parse()是解析</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">JSON</span>.parse)&#123;</span><br><span class="line">                        data=<span class="built_in">JSON</span>.parse(data);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        data=<span class="built_in">eval</span>(<span class="string">'('</span>+str+<span class="string">')'</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'xml'</span>:</span><br><span class="line">                    data=xhr.responseXML;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                options.success &amp;&amp; options.success(data);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                options.error &amp;&amp; options.error();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/ajax.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8&gt;&lt;/script&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &lt;script&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">            window.onload=function ()&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                let oBtn=document.getElementById('btn1')</span></span></span><br><span class="line"><span class="tag"><span class="string">                oBtn.onclick=function ()&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                    ajax(&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                        url:'1.php',</span></span></span><br><span class="line"><span class="tag"><span class="string">                        data:&#123;a:34,b:88&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">                        //dataType:'json',</span></span></span><br><span class="line"><span class="tag"><span class="string">                        success(data)&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                            alert(data);</span></span></span><br><span class="line"><span class="tag"><span class="string">                            console.log(data);</span></span></span><br><span class="line"><span class="tag"><span class="string">                        &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">                        error()&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                            alert('错了')</span></span></span><br><span class="line"><span class="tag"><span class="string">                        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">                    &#125;)</span></span></span><br><span class="line"><span class="tag"><span class="string">                &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">            &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &lt;/script&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;/head&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;body&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;input type="</span><span class="attr">button</span>" <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="5、jsonp"><a href="#5、jsonp" class="headerlink" title="5、jsonp"></a>5、jsonp</h3><ol><li>jsonp:越来越少用，算是中间产物，</li><li>跨域</li><li>jsonp就是创建了script标签，往里面塞东西</li><li>安全性问题————过于开放，安全性低</li><li>目前只知道如百度给个搜索链接，利用自定义show函数搜索百度库里的东西</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="code">    &lt;title&gt;&lt;/title&gt;</span></span><br><span class="line"><span class="code">    &lt;script&gt;</span></span><br><span class="line"><span class="code">    function show(json)&#123;</span></span><br><span class="line"><span class="code">      let oUl=document.getElementById('ul1');</span></span><br><span class="line"></span><br><span class="line"><span class="code">      oUl.innerHTML='';</span></span><br><span class="line"><span class="code">      json.s.forEach(str=&gt;&#123;</span></span><br><span class="line"><span class="code">        let oLi=document.createElement('li');</span></span><br><span class="line"></span><br><span class="line"><span class="code">        oLi.innerHTML=str;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        oUl.appendChild(oLi);</span></span><br><span class="line"><span class="code">      &#125;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    window.onload=function ()&#123;</span></span><br><span class="line"><span class="code">      let oTxt=document.getElementById('txt1');</span></span><br><span class="line"></span><br><span class="line"><span class="code">      oTxt.oninput=function ()&#123;</span></span><br><span class="line"><span class="code">        let oS=document.createElement('script');//encodeURIComponent();把中文转换为英文</span></span><br><span class="line"><span class="code">        oS.src=`https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=$&#123;encodeURIComponent(oTxt.value)&#125;&amp;cb=show`;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        document.head.appendChild(oS);</span></span><br><span class="line"><span class="code">      &#125;;</span></span><br><span class="line"><span class="code">    &#125;;</span></span><br><span class="line"><span class="code">    &lt;/script&gt;</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;input type="text" id="txt1"&gt;</span></span><br><span class="line"><span class="code">    &lt;ul id="ul1"&gt;&lt;/ul&gt;</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>页面效果<br><img src="/images/jsonp1.png" alt="jsonp1.png"></p><hr><h2 id="十二、通信相关"><a href="#十二、通信相关" class="headerlink" title="十二、通信相关"></a>十二、通信相关</h2><h3 id="1、http"><a href="#1、http" class="headerlink" title="1、http"></a>1、http</h3><blockquote><p>http:容易攻击<br>https:加入security,安全<br>网站被恶意挂入广告，可能是dns被污染了，跟前端无关，是运营商的事</p></blockquote><ol><li>http 1.0 特点是一次性连接</li><li>http 1.1 跟1.0版本没区别，就是多了保持连接，比如请求一个页面，一直保持连接，当再次请求时，就不需要那么麻烦，再次连接，性能提升</li><li>http 2.0<ol><li>还是草案</li><li>强制https</li><li>自带双向通信</li><li>提供协议级的多路复用(多路复用：就是一个连接之内可以同时传输多个东西，多个数据可以在一个连接内传输)</li></ol></li></ol><ul><li>http协议</li></ul><blockquote><p>目前最权威的是 frc http<br>rfc:一系列以编号排定的文件，不是一个组织，目前有isoc赞助发行</p></blockquote><ul><li>三次握手，四次分手</li></ul><blockquote><p>1.客户端连接请求，2.服务器接收请求，3.客户端发送请求，加上第4.就是四次分手，服务器发送数据</p></blockquote><ul><li>http消息（头，体）</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="code">           |------------------|</span></span><br><span class="line"><span class="code">         头|  GET             |  &lt;=32k</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |————————————————-—|</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |   POST           |</span></span><br><span class="line">  body/体  |                  |  <span class="xml"><span class="tag">&lt;<span class="name">=1G</span></span></span></span><br><span class="line"><span class="xml">           |                  |</span></span><br><span class="line"><span class="xml">           |                  |</span></span><br><span class="line"><span class="xml">           |                  |</span></span><br><span class="line"><span class="xml">           |                  |</span></span><br><span class="line"><span class="xml">           |——————————————————-</span></span><br><span class="line"><span class="xml">            -------&gt;</span>requset</span><br><span class="line">客户端                                 服务器</span><br><span class="line"></span><br><span class="line"><span class="code">                response&lt;-------</span></span><br><span class="line"><span class="code">           |----------------- -|</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |————————————————-—|</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |                  |</span></span><br><span class="line"><span class="code">           |——————————————————|</span></span><br></pre></td></tr></table></figure><h3 id="2、OSI"><a href="#2、OSI" class="headerlink" title="2、OSI"></a>2、OSI</h3><ul><li><p>OSI七层交换“参考”模型 低到高</p><ol><li>物理层     物理学家、通信工程–材料，电压</li><li>链路层     内网寻址   ARP、ICMP协议（如：ping通）</li><li>网络层     外网寻址   IP  </li><li>传输层     通信稳定性 TCP UDP</li><li>会话层     –记录装态</li><li>表示层     –统一各个网络结构  后来由传输层代替了</li><li>应用层     应用细节  HTTP FTP SMTP POP3</li></ol></li><li><p>五层模型</p><ol><li>物理层</li><li>链路层</li><li>网络层</li><li>传输层</li><li>应用层</li></ol></li></ul><blockquote><p>无状态通信：服务器记不得客户端是否访问过</p></blockquote><ul><li><p>TCP–用户控制协议   文件下载，聊天</p><ol><li>保证到达</li><li>保证质量</li><li>保证顺序</li><li>面向连接</li><li>游戏卡顿是基于TCP</li><li>HTTP是应用层协议，是基于TCP</li></ol></li><li><p>UDP–用户数据报协议   对质量没有绝对要求，对延迟很高要求   IP电话 视频直播</p><ol><li>不保证到达</li><li>不保证质量</li><li>不保证顺序</li><li>面向无连接</li></ol></li></ul><blockquote><p>应用层 消息<br>数据链路层 帧<br>网络层  数据报</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES6新语法&quot;&gt;&lt;a href=&quot;#ES6新语法&quot; class=&quot;headerlink&quot; title=&quot;ES6新语法&quot;&gt;&lt;/a&gt;ES6新语法&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、变量-赋值&quot;&gt;&lt;a href=&quot;#一、变量-赋值&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="https://intosteel.github.io/tags/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ES6" scheme="https://intosteel.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="https://intosteel.github.io/2019/08/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>https://intosteel.github.io/2019/08/19/我的第一篇博客文章/</id>
    <published>2019-08-19T05:32:37.000Z</published>
    <updated>2019-08-20T08:52:25.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.codesheep.com" target="_blank" rel="noopener">www.codesheep.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;内容&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://intosteel.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
